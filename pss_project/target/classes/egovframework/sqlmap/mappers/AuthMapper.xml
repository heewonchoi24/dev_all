<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="auth">
	
	<select id="listThread" parameterType="zvl" resultType="zvl">
		SELECT
			X.AUTHOR_ID			AS SEQ,
			X.AUTHOR_NM		AS SUBJECT,
			X.DESCRIPTION  AS CONTENTS,
			IFNULL(( SELECT Z.USER_NM FROM  USER_MASTR Z 
       		  WHERE  X.REGIST_ID=Z.USER_ID ), X.REGIST_ID) AS TRNSMIT_NM, 	
			DATE_FORMAT(X.REGIST_DT, '%Y.%m.%d') AS REGIST_DT,
			X.REGIST_ID		AS REGIST_ID,
			DATE_FORMAT(X.UPDT_DT, '%Y.%m.%d') 	AS UPDT_DT,
			X.UPDT_ID		AS UPDT_ID,
			X.DELETE_YN,
			( SELECT COUNT(Z.USER_NM) FROM  USER_MASTR Z 
       		  WHERE  X.AUTHOR_ID=Z.AUTHOR_ID ) AS USE_CNT
		FROM
			AUTHORITY_MASTR	AS X
		WHERE 1=1
		<if test="authorId != null and authorId != ''">
			AND AUTHOR_ID = #{authorId}
		</if>
		ORDER BY X.AUTHOR_ID
		<if test="isModify == '' or isModify == null or isModify == undefined">
			<if test="recordCountPerPage != null and firstIndex != null">
				LIMIT #{recordCountPerPage} OFFSET #{firstIndex}			
			</if>
		</if>
	</select>
	
	<select id="getAuthList" parameterType="zvl" resultType="zvl">
		SELECT
			  menu.MENU_ID
			, menu.MENU_NM
			, menu.depth1st
			, menu.depth2nd
		FROM
		(
			SELECT
				  a.MENU_ID
				, a.MENU_NM
				, IF(A.UPPER_MENU_ID,	IF(B.UPPER_MENU_ID,C.OUTPUT_ORDR,B.OUTPUT_ORDR) 	,A.OUTPUT_ORDR   ) AS depth1st
				, IF(A.UPPER_MENU_ID,	IF(B.UPPER_MENU_ID,B.OUTPUT_ORDR,A.OUTPUT_ORDR) 	,0              ) AS depth2nd
				, IF(A.UPPER_MENU_ID,	IF(B.UPPER_MENU_ID,A.OUTPUT_ORDR,0) 				,0              ) AS depth3rd
			FROM MENU_MASTR A
				LEFT OUTER JOIN (
					SELECT MENU_ID,UPPER_MENU_ID,OUTPUT_ORDR 
					FROM MENU_MASTR
					WHERE DELETE_YN = 'N'
					AND INDICT_YN = 'Y'
				) B ON A.UPPER_MENU_ID = B.MENU_ID
				LEFT OUTER JOIN(
					SELECT MENU_ID,UPPER_MENU_ID,OUTPUT_ORDR
					FROM MENU_MASTR
					WHERE DELETE_YN = 'N'
					AND INDICT_YN = 'Y'
				) C ON B.UPPER_MENU_ID = C.MENU_ID
		) as menu
		WHERE depth1st BETWEEN 3 AND 5
		ORDER BY depth1st, depth2nd
	</select>
	
	<select id="listThreadDetail" parameterType="zvl" resultType="zvl">
		SELECT
			X.AUTHOR_ID			AS AUTHOR_ID,
			X.MENU_ID			AS MENU_ID,
			X.AUTH_READ			AS AUTH_READ,
			X.AUTH_WRITE			AS AUTH_WRITE,
			X.AUTH_DOWNLOAD	AS AUTH_DOWNLOAD,
			IFNULL(( SELECT Z.USER_NM FROM  USER_MASTR Z 
       		  WHERE  X.REGIST_ID=Z.USER_ID ), X.REGIST_ID) AS TRNSMIT_NM, 	
			DATE_FORMAT(X.REGIST_DT, '%Y.%m.%d') AS REGIST_DT,
			X.REGIST_ID		AS REGIST_ID,
			DATE_FORMAT(X.UPDT_DT, '%Y.%m.%d') 	AS UPDT_DT,
			X.UPDT_ID		AS UPDT_ID,
			X.DELETE_YN,
			( SELECT COUNT(Z.USER_NM) FROM  USER_MASTR Z 
       		  WHERE  X.AUTHOR_ID=Z.AUTHOR_ID ) AS USE_CNT
		FROM
			AUTHOR_MENU_MAP	AS X
		WHERE X.AUTHOR_ID = #{authorId}
		ORDER BY X.AUTHOR_ID
	</select>
	
	
	<select id="cntThread" parameterType="zvl" resultType="int">
		SELECT
			COUNT(AUTHOR_ID)
		FROM
			AUTHORITY_MASTR
		WHERE
		    DELETE_YN = 'N'
	</select>

	
	<insert id="registThread" parameterType="zvl">
		INSERT INTO AUTHORITY_MASTR
		(
			AUTHOR_NM,
			DESCRIPTION,
			REGIST_DT,
			REGIST_ID,
			DELETE_YN
		)
		VALUES
		(
			#{authorNm},
			#{description},
			now(),
			#{user_id},
			#{deleteYn}
		)
		<selectKey keyProperty="seq" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<delete id="deleteAuth" parameterType="zvl">
		DELETE FROM AUTHORITY_MASTR  WHERE  AUTHOR_ID	= #{authorId}
	</delete>

	<update id="updateAuth" parameterType="zvl">
		UPDATE AUTHORITY_MASTR SET
			AUTHOR_NM   = #{authorNm},
			DESCRIPTION = #{description},
			DELETE_YN   = #{deleteYn},
			UPDT_DT	= now(),
			UPDT_ID	= #{user_id}
		WHERE
			AUTHOR_ID	= #{authorId}
	</update>
	
	<insert id="mergeAuthDetail" parameterType="zvl">
		INSERT INTO AUTHOR_MENU_MAP
		(
			MENU_ID,
			AUTHOR_ID,
			AUTH_READ,
			AUTH_WRITE,
			AUTH_DOWNLOAD,
			REGIST_DT,
			REGIST_ID
		) VALUES (
			#{menuId},
			#{authorId},
			#{authRead},
			#{authWrite},
			#{authDownload},
			NOW(),
			#{user_id}					
		)
		ON DUPLICATE KEY UPDATE
			MENU_ID = #{menuId},
			AUTHOR_ID = #{authorId},
			AUTH_READ = #{authRead},
			AUTH_WRITE = #{authWrite},
			AUTH_DOWNLOAD = #{authDownload},
			UPDT_DT = NOW(),
			UPDT_ID = #{user_id}
	</insert>
		
</mapper>